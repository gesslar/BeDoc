export const actions = [
  {
    meta: Object.freeze({
      action: "print",
      format: "markdown",
    }),

    setup({parent,log}) {
      this.parent = parent
      this.log = log
      this.documentExtension = ".md"
    },

    /**
     * This is the action to print structured object to text.
     *
     * @param {object} module Data coming in from the printer
     * @param {object} module.file The file object representing the file
     * being currently being processed
     * @param {object[]} module.moduleContent An array of objects containing
     *  function definitions prepared by the parser.
     * @returns {Promise<object>} The result of the print operations.
     */
    async run(module) {
      const hook = this.hook ?? (async() => null)
      const debug = this.log.newDebug()
      const {START, SECTION_LOAD, ENTER, EXIT, END} = this.HOOKS ?? {}

      const {file: {module: moduleName}, moduleContent} =
        await hook(START, module) ?? module

      debug("Printing module", 3, moduleName)

      const sorted =
        moduleContent?.sort(function(a, b) {
          return a.name?.localeCompare(b.name)
        }) ?? module.moduleContent

      if(sorted === undefined || sorted.length === 0)
        return {
          status: "warning",
          warning: `No functions to print for module: \`${moduleName}\``
        }

      const moduleOutput = []

      /**
       * Generic section printer
       *
       * @param {string} sectionName - The section name
       * @param {object} sectionContent - The function section to process
       * @param {Function} formatContent - Callback to format the content
       * @returns {Promise<string>} The formatted content
       */
      async function printIt(sectionName, sectionContent, formatContent) {
        // If we don't even have anything, nevermind? lulz
        if(!sectionContent)
          return null

        // ENTER - should return the exactly same shaped object as was passed
        // to it.
        const enter = await hook(ENTER, {moduleName,sectionName,sectionContent})

        // Whew, that was a lot of work far! We should now get a string result.
        const formatted = formatContent(enter?.sectionContent || sectionContent)

        // EXIT - should take the string so far, and return even more string.
        // Well, not _MORE_ string, but... shut up.
        const exit = await hook(
          EXIT, {
            moduleName,
            sectionName,
            sectionContent: formatted
          }
        ) ?? formatted

        return exit
      }

      for(const section of sorted) {
        const work = await hook(SECTION_LOAD, {moduleName, section})
                           ?? section
        let output, sectionName
        const sectionOutput = new Map()

        // 1. Print the section name
        sectionName = "name"
        output = await printIt(sectionName, section.signature.name, w =>
          `## ${w}`
        )
        output && sectionOutput.set(sectionName, output)

        // 2. Print the signature
        sectionName = "signature"
        output = await printIt(sectionName, work[sectionName], w => {
          return `${w.access} `+
                 `${w.modifiers.length?w.modifiers.join(" ")+" ":""}`+
                 `*${w.type}* **${w.name}**`+
                 `(${w.parameters.join(", ")})`
        })
        output && sectionOutput.set(sectionName, output)

        // 2. Print the section description
        sectionName = "description"
        output = await printIt(sectionName, work[sectionName], w =>
          w.length ? w.map(line => line.trim()).join("\n") : ""
        )
        output && sectionOutput.set(sectionName, output)

        // 3. Print the section parameters
        sectionName = "param"
        output = await printIt(sectionName, work[sectionName], w => {
          const params = w.map(p => {

            // capture detailed name info
            let optionalParam, paramName, defaultValue

            // Determine if this is an optional parameter
            const optionalMatch = p.name.match(/^\[(.*)\]$/)
            if(optionalMatch) {
              optionalParam = true
              paramName = optionalMatch[1]
            } else {
              paramName = p.name
            }

            // Determine if there is a default value
            const defaultMatch = paramName.match(/(.*)=(.*)/)
            defaultValue = defaultMatch ? defaultMatch[2] : null
            paramName = defaultMatch ? defaultMatch[1] : paramName

            let optionalAndOrDefault = optionalParam || defaultValue
              ?(() => {
                if(optionalParam && defaultValue)
                  return ` (Optional. Default: ${defaultValue})`
                else if(optionalParam)
                  return " (Optional)"
                else if(defaultValue)
                  return ` (Default: ${defaultValue})`
                else
                  throw new Error("Uhm, we seem to have hit a bump.")
              })()
              : ""

            const content = p.content
            while(content.length && (!content.at(0) || !content.at(-1))) {
              if(!content.at(0))
                content.shift()

              if(!content.at(-1))
                content.pop()
            }

            return `**${paramName}** *${p.type}${optionalAndOrDefault}*\n\n` +
                    `: ${content.map(c => c.trim()).join(" ")}`
          }) ?? []
          return params.join("\n")
        })
        output && sectionOutput.set(sectionName, output)

        // 4. Print the section return
        output = await printIt(sectionName, work[sectionName], w => w
          ? `### Returns\n\n**${w.type}** `+
            `${w.content?.map(c => c.trim()).join(" ") ?? ""}`
          : ""
        )
        output && sectionOutput.set(sectionName, output)

        // 5. Print the section example
        sectionName = "example"
        output = await printIt(sectionName, work[sectionName], w => w.length
          ? "### Example\n\n" + w.join("\n")
          : ""
        )
        output && sectionOutput.set(sectionName, output)
        moduleOutput.push(Array.from(sectionOutput.values()).join("\n\n"))
      }

      debug(`Printing complete for module \`${moduleName}\``, 3)

      const joinedOutput = moduleOutput.join("\n")
      const finalOutput = await hook(
        END, {
          moduleName,
          moduleContent: joinedOutput
        }
      ) ?? joinedOutput

      return {
        status: "success",
        message: "File printed successfully",
        destFile: `${moduleName}${this.documentExtension}`,
        destContent: finalOutput,
      }
    },

    /**
     * Wraps text to a specified width with optional indentation
     *
     * @param {string} str - The text to wrap
     * @param {number} [wrapAt] - The column at which to wrap the text
     * @param {number} [indentAt] - The number of spaces to indent wrapped lines
     * @returns {string} The wrapped text
     */
    wrap(str, wrapAt = 80, indentAt = 0) {
      const sections = str.split("\n").map(section => {
        let parts = section.split(" ")
        let inCodeBlock = false
        let isStartOfLine = true // Start of each section is start of line

        // Preserve leading space if it existed
        if(section[0] === " ")
          parts = ["", ...parts]

        let running = 0

        parts = parts.map(part => {
          // Only check for code block if we're at start of line
          if(isStartOfLine && /^```(?:\w+)?$/.test(part)) {
            inCodeBlock = !inCodeBlock
            running += part.length + 1
            isStartOfLine = false
            return part
          }

          if(part[0] === "\n") {
            running = 0
            isStartOfLine = true // Next part will be at start of line
            return part
          }

          running += part.length + 1
          isStartOfLine = false // No longer at start of line

          if(!inCodeBlock && running >= wrapAt) {
            running = part.length + indentAt
            isStartOfLine = true // After newline, next part will be at start
            return "\n" + " ".repeat(indentAt) + part
          }

          return part
        })

        return parts
          .join(" ")
          .split("\n")
          .map(line => line.trimEnd())
          .join("\n")
      })

      return sections.join("\n")
    },
  },
]

export const contracts = [
  `
---
accepts:
  root:
    dataType: object
    required: true
    contains:
      functions:
        dataType: object[]
        required: true
        contains:
          name:
            dataType: string
            required: true  # Used in sorting and section headers
          description:
            dataType: string[]  # Optional, handled gracefully if missing
          param:
            dataType: object[]
            contains:
              type:
                dataType: string|string[]
                required: true  # Used in param formatting
              name:
                dataType: string
                required: true  # Used in param formatting
              content:
                dataType: string[]
                required: true  # Used for param descriptions
          return:
            dataType: object
            contains:
              type:
                dataType: string|string[]
                required: true  # Used in return type display
              content:
                dataType: string[]  # Optional, handled if missing
          example:
            dataType: string[]  # Optional, handled gracefully if missing
`,
]
