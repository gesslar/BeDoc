import process from "node:process"
import {setTimeout as timeoutPromise} from "node:timers/promises"
import "dotenv/config"
import MediaWikiUploader from "./mediawiki-uploader.js"
import Logger from "@gesslar/bedoc/core/Logger.js"

export const Hooks = {
  parse: {},

  print: {
    /**
     * Setup the current hooks and set some initial values.
     * @async
     * @function
     * @param {object} options Passed in options object
     * @param {Logger} options.log An instance of the Logger class
     */
    async setup({log}) {
      try {
        this.log = log
        this.debug = log.newDebug()

        const {BASE_URL,BOT_USERNAME,BOT_PASSWORD} = process.env
        this.BASE_URL = BASE_URL
        this.BOT_USERNAME = BOT_USERNAME
        this.BOT_PASSWORD = BOT_PASSWORD

        this.log.debug("Init hooks for: %o", 2, this)
      } catch(error) {
        this.log.error(`Error setting up hooks:`, error)
      }
    },

    async enter(section) {
      const {sectionName, sectionContent} = section

      if(sectionName === "description") {
        // Trim leading and trailing empty lines.
        const content = sectionContent
        while(content.length && !content.at(0))
          content.shift()

        while(content.length && !content.at(-1))
          content.pop()

        return section
      }
    },

    /**
     * Processes a module at the end, converting the syntax highlighting from
     * markdown to wikitext.
     *
     * Additionally, uploads the data to a MediaWiki site.
     * @async
     * @function
     * @param {object} module Options object.
     * @param {string} module.moduleName The name of the module being processed
     * @param {string} module.moduleContent The output generated by the printer
     * @param {number?} [module.count] The number of times we've done this.
     * @returns {Promise<string>} The altered text.
     */
    async end(module) {
      const {moduleName,moduleContent} = module
      let count = module.count ?? 0

      const {BASE_URL, BOT_USERNAME, BOT_PASSWORD} = this
      const bot = new MediaWikiUploader()
      if(!bot)
        throw new Error("MediaWiki bot not instantiated.")

      const info = (...arg) => this.log.info(...arg)

      if(count > 0)
        info(`Retrying \`${moduleName}\` #${count}...`)

      const wikitext = moduleContent
        .replace(
          /```c\n([\s\S]+?)```/g,
          '<syntaxhighlight lang="c">\n$1</syntaxhighlight>\n',
        ) + "\n{{sefun}}\n"

      try {
        const loginResult = await bot.login({
          baseUrl: BASE_URL,
          botUsername: BOT_USERNAME,
          botPassword: BOT_PASSWORD
        })

        if(loginResult.status === "error")
          throw loginResult.error

        const request = {
          token: loginResult.token,
          title: moduleName,
          content: wikitext
        }

        const editResult = await bot.createOrEditPage(request)

        if(editResult.status === "error") {
          const data = JSON.parse(editResult.error.message)
          const secs = 10 + (count * 2)

          if(data?.error?.code) {
            if(data.error.code === "ratelimited") {
              this.log.warn(`Rate limited for \`${moduleName}\`. Trying again in ${secs} seconds.`)

              await timeoutPromise(secs*1_000)
              module.count = count+1
              return this.end(module)
            } else {
              throw new Error(`Error uploading \`${moduleName}\`: ${data.error.info}`)
            }
          }
        }

        // console.log(editResult)
        // console.log(editResult.result)
        const {title, oldrevid} = editResult.result
        const sanitizedUrl =
          `${BASE_URL}/index.php?title=${encodeURIComponent(title)}`
        if(oldrevid !== undefined) {
          if(oldrevid === 0) {
            this.log.info(`Page created successfully: '${sanitizedUrl}'`)
          } else {
            this.log.info(`Page edited successfully: '${sanitizedUrl}'`)
          }
        } else {
          this.log.info(`No change was made to page '${sanitizedUrl}'`)
        }
      } catch(error) {
        this.log.error(`Error creating/editing page: ${error.message}`)
      }

      return wikitext
    },
  },
}
